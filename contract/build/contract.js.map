{"version":3,"file":"contract.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../node_modules/near-sdk-js/lib/promise.js","../src/utils.ts","../src/contract.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\nexport function u8ArrayToBytes(array) {\n    return array.reduce((result, value) => `${result}${String.fromCharCode(value)}`, \"\");\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    return Uint8Array.from([...bytes].map((byte) => byte.charCodeAt(0)));\n}\n/**\n * Accepts a string or Uint8Array and either checks for the validity of the string or converts the Uint8Array to Bytes.\n *\n * @param stringOrU8Array - The string or Uint8Array to be checked/transformed\n * @returns Safe Bytes to be used in NEAR calls.\n */\nexport function bytes(stringOrU8Array) {\n    if (typeof stringOrU8Array === \"string\") {\n        return checkStringIsBytes(stringOrU8Array);\n    }\n    if (stringOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(stringOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(value) {\n    [...value].forEach((character, index) => {\n        assert(character.charCodeAt(0) <= 255, `string ${value} at index ${index}: ${character} is not a valid byte`);\n    });\n    return value;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    });\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(valueToDeserialize, (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { bytes } from \"../utils\";\nimport { base58 } from \"@scure/base\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data.charCodeAt(0));\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data.charCodeAt(0));\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = bytes(base58.decode(keyData));\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(`${String.fromCharCode(curve)}${data}`);\n    }\n}\n","import { assert } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageRead(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWrite(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemove(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturn(value) {\n    env.value_return(value);\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageRead(\"STATE\");\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWrite(\"STATE\", this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value);\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import * as near from \"../api\";\nimport { getValueWithOptions, serializeValueWithOptions, } from \"../utils\";\n/**\n * A lookup map that stores data in NEAR storage.\n */\nexport class LookupMap {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     */\n    containsKey(key) {\n        const storageKey = this.keyPrefix + key;\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const storageKey = this.keyPrefix + key;\n        const value = near.storageRead(storageKey);\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + key;\n        if (!near.storageRemove(storageKey)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param newValue - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, newValue, options) {\n        const storageKey = this.keyPrefix + key;\n        const storageValue = serializeValueWithOptions(newValue, options);\n        if (!near.storageWrite(storageKey, storageValue)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keyValuePairs, options) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value, options);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { assert, getValueWithOptions, u8ArrayToBytes, serializeValueWithOptions, ERR_INCONSISTENT_STATE, ERR_INDEX_OUT_OF_BOUNDS, } from \"../utils\";\nfunction indexToKey(prefix, index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    const key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/**\n * An iterable implementation of vector that stores its content on the trie.\n * Uses the following map: index -> element\n */\nexport class Vector {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     * @param length - The initial length of the collection. By default 0.\n     */\n    constructor(prefix, length = 0) {\n        this.prefix = prefix;\n        this.length = length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.length === 0;\n    }\n    /**\n     * Get the data stored at the provided index.\n     *\n     * @param index - The index at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(index, options) {\n        if (index >= this.length) {\n            return options?.defaultValue ?? null;\n        }\n        const storageKey = indexToKey(this.prefix, index);\n        const value = near.storageRead(storageKey);\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes an element from the vector and returns it in serialized form.\n     * The removed element is replaced by the last element of the vector.\n     * Does not preserve ordering, but is `O(1)`.\n     *\n     * @param index - The index at which to remove the element.\n     * @param options - Options for retrieving and storing the data.\n     */\n    swapRemove(index, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        if (index + 1 === this.length) {\n            return this.pop(options);\n        }\n        const key = indexToKey(this.prefix, index);\n        const last = this.pop(options);\n        assert(near.storageWrite(key, serializeValueWithOptions(last, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Adds data to the collection.\n     *\n     * @param element - The data to store.\n     * @param options - Options for storing the data.\n     */\n    push(element, options) {\n        const key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, serializeValueWithOptions(element, options));\n    }\n    /**\n     * Removes and retrieves the element with the highest index.\n     *\n     * @param options - Options for retrieving the data.\n     */\n    pop(options) {\n        if (this.isEmpty()) {\n            return options?.defaultValue ?? null;\n        }\n        const lastIndex = this.length - 1;\n        const lastKey = indexToKey(this.prefix, lastIndex);\n        this.length -= 1;\n        assert(near.storageRemove(lastKey), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Replaces the data stored at the provided index with the provided data and returns the previously stored data.\n     *\n     * @param index - The index at which to replace the data.\n     * @param element - The data to replace with.\n     * @param options - Options for retrieving and storing the data.\n     */\n    replace(index, element, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        const key = indexToKey(this.prefix, index);\n        assert(near.storageWrite(key, serializeValueWithOptions(element, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (let index = 0; index < this.length; index++) {\n            const key = indexToKey(this.prefix, index);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const vector = new Vector(data.prefix, data.length);\n        return vector;\n    }\n}\n/**\n * An iterator for the Vector collection.\n */\nexport class VectorIterator {\n    /**\n     * @param vector - The vector collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(vector, options) {\n        this.vector = vector;\n        this.options = options;\n        this.current = 0;\n    }\n    next() {\n        if (this.current >= this.vector.length) {\n            return { value: null, done: true };\n        }\n        const value = this.vector.get(this.current, this.options);\n        this.current += 1;\n        return { value, done: false };\n    }\n}\n","import { assert, ERR_INCONSISTENT_STATE, getValueWithOptions, serializeValueWithOptions, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\n/**\n * An unordered map that stores data in NEAR storage.\n */\nexport class UnorderedMap {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.keys = new Vector(`${prefix}u`); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(`${prefix}m`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this.keys.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.keys.isEmpty();\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value] = valueAndIndex;\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param value - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, value, options) {\n        const valueAndIndex = this.values.get(key);\n        const serialized = serializeValueWithOptions(value, options);\n        if (valueAndIndex === null) {\n            const newElementIndex = this.length;\n            this.keys.push(key);\n            this.values.set(key, [serialized, newElementIndex]);\n            return null;\n        }\n        const [oldValue, oldIndex] = valueAndIndex;\n        this.values.set(key, [serialized, oldIndex]);\n        return getValueWithOptions(oldValue, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value, index] = oldValueAndIndex;\n        assert(this.keys.swapRemove(index) !== null, ERR_INCONSISTENT_STATE);\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (!this.keys.isEmpty() && index !== this.keys.length) {\n            // if there is still elements and it was not the last element\n            const swappedKey = this.keys.get(index);\n            const swappedValueAndIndex = this.values.get(swappedKey);\n            assert(swappedValueAndIndex !== null, ERR_INCONSISTENT_STATE);\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (const key of this.keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this.keys.clear();\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new UnorderedMapIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     */\n    extend(keyValuePairs) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map.keys = new Vector(`${data.prefix}u`);\n        map.keys.length = data.keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(`${data.prefix}m`);\n        return map;\n    }\n}\n/**\n * An iterator for the UnorderedMap collection.\n */\nclass UnorderedMapIterator {\n    /**\n     * @param unorderedMap - The unordered map collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(unorderedMap, options) {\n        this.options = options;\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        const key = this.keys.next();\n        if (key.done) {\n            return { value: [key.value, null], done: key.done };\n        }\n        const valueAndIndex = this.map.get(key.value);\n        assert(valueAndIndex !== null, ERR_INCONSISTENT_STATE);\n        return {\n            done: key.done,\n            value: [key.value, getValueWithOptions(valueAndIndex[0], this.options)],\n        };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array, assert, serializeValueWithOptions, ERR_INCONSISTENT_STATE, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nfunction serializeIndex(index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    return u8ArrayToBytes(array);\n}\nfunction deserializeIndex(rawIndex) {\n    const array = bytesToU8Array(rawIndex);\n    const [data] = new Uint32Array(array.buffer);\n    return data;\n}\n/**\n * An unordered set that stores data in NEAR storage.\n */\nexport class UnorderedSet {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.elementIndexPrefix = `${prefix}i`;\n        this.elements = new Vector(`${prefix}e`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this.elements.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param element - The value for which to check the presence.\n     * @param options - Options for storing data.\n     */\n    contains(element, options) {\n        const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n        return near.storageHasKey(indexLookup);\n    }\n    /**\n     * If the set did not have this value present, `true` is returned.\n     * If the set did have this value present, `false` is returned.\n     *\n     * @param element - The value to store in the collection.\n     * @param options - Options for storing the data.\n     */\n    set(element, options) {\n        const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        const nextIndex = this.length;\n        const nextIndexRaw = serializeIndex(nextIndex);\n        near.storageWrite(indexLookup, nextIndexRaw);\n        this.elements.push(element, options);\n        return true;\n    }\n    /**\n     * Returns true if the element was present in the set.\n     *\n     * @param element - The entry to remove.\n     * @param options - Options for retrieving and storing data.\n     */\n    remove(element, options) {\n        const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n        const indexRaw = near.storageRead(indexLookup);\n        if (!indexRaw) {\n            return false;\n        }\n        // If there is only one element then swap remove simply removes it without\n        // swapping with the last element.\n        if (this.length === 1) {\n            near.storageRemove(indexLookup);\n            const index = deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        // If there is more than one element then swap remove swaps it with the last\n        // element.\n        const lastElement = this.elements.get(this.length - 1, options);\n        assert(!!lastElement, ERR_INCONSISTENT_STATE);\n        near.storageRemove(indexLookup);\n        // If the removed element was the last element from keys, then we don't need to\n        // reinsert the lookup back.\n        if (lastElement !== element) {\n            const lastLookupElement = this.elementIndexPrefix +\n                serializeValueWithOptions(lastElement, options);\n            near.storageWrite(lastLookupElement, indexRaw);\n        }\n        const index = deserializeIndex(indexRaw);\n        this.elements.swapRemove(index);\n        return true;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear(options) {\n        for (const element of this.elements) {\n            const indexLookup = this.elementIndexPrefix + serializeValueWithOptions(element, options);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this.elements, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.set(element);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const set = new UnorderedSet(data.prefix);\n        // reconstruct Vector\n        const elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { assert } from \"./utils\";\nimport * as near from \"./api\";\n/**\n * A promise action which can be executed on the NEAR blockchain.\n */\nexport class PromiseAction {\n}\n/**\n * A create account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class CreateAccount extends PromiseAction {\n    add(promiseIndex) {\n        near.promiseBatchActionCreateAccount(promiseIndex);\n    }\n}\n/**\n * A deploy contract promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeployContract extends PromiseAction {\n    /**\n     * @param code - The code of the contract to be deployed.\n     */\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeployContract(promiseIndex, this.code);\n    }\n}\n/**\n * A function call promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCall extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCall(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call weight promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeight extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeight(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A transfer promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Transfer extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    constructor(amount) {\n        super();\n        this.amount = amount;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionTransfer(promiseIndex, this.amount);\n    }\n}\n/**\n * A stake promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Stake extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    constructor(amount, publicKey) {\n        super();\n        this.amount = amount;\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionStake(promiseIndex, this.amount, this.publicKey.data);\n    }\n}\n/**\n * A add full access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddFullAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFullAccess(promiseIndex, this.publicKey.data, this.nonce);\n    }\n}\n/**\n * A add access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, allowance, receiverId, functionNames, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.allowance = allowance;\n        this.receiverId = receiverId;\n        this.functionNames = functionNames;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFunctionCall(promiseIndex, this.publicKey.data, this.nonce, this.allowance, this.receiverId, this.functionNames);\n    }\n}\n/**\n * A delete key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to delete from the account.\n     */\n    constructor(publicKey) {\n        super();\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteKey(promiseIndex, this.publicKey.data);\n    }\n}\n/**\n * A delete account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteAccount extends PromiseAction {\n    /**\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    constructor(beneficiaryId) {\n        super();\n        this.beneficiaryId = beneficiaryId;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteAccount(promiseIndex, this.beneficiaryId);\n    }\n}\nclass PromiseSingle {\n    constructor(accountId, actions, after, promiseIndex) {\n        this.accountId = accountId;\n        this.actions = actions;\n        this.after = after;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const promiseIndex = this.after\n            ? near.promiseBatchThen(this.after.constructRecursively(), this.accountId)\n            : near.promiseBatchCreate(this.accountId);\n        this.actions.forEach((action) => action.add(promiseIndex));\n        this.promiseIndex = promiseIndex;\n        return promiseIndex;\n    }\n}\nexport class PromiseJoint {\n    constructor(promiseA, promiseB, promiseIndex) {\n        this.promiseA = promiseA;\n        this.promiseB = promiseB;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const result = near.promiseAnd(this.promiseA.constructRecursively(), this.promiseB.constructRecursively());\n        this.promiseIndex = result;\n        return result;\n    }\n}\n/**\n * A high level class to construct and work with NEAR promises.\n */\nexport class NearPromise {\n    /**\n     * @param subtype - The subtype of the promise.\n     * @param shouldReturn - Whether the promise should return.\n     */\n    constructor(subtype, shouldReturn) {\n        this.subtype = subtype;\n        this.shouldReturn = shouldReturn;\n    }\n    /**\n     * Creates a new promise to the provided account ID.\n     *\n     * @param accountId - The account ID on which to call the promise.\n     */\n    static new(accountId) {\n        const subtype = new PromiseSingle(accountId, [], null, null);\n        return new NearPromise(subtype, false);\n    }\n    addAction(action) {\n        if (this.subtype instanceof PromiseJoint) {\n            throw new Error(\"Cannot add action to a joint promise.\");\n        }\n        this.subtype.actions.push(action);\n        return this;\n    }\n    /**\n     * Creates a create account promise action and adds it to the current promise.\n     */\n    createAccount() {\n        return this.addAction(new CreateAccount());\n    }\n    /**\n     * Creates a deploy contract promise action and adds it to the current promise.\n     *\n     * @param code - The code of the contract to be deployed.\n     */\n    deployContract(code) {\n        return this.addAction(new DeployContract(code));\n    }\n    /**\n     * Creates a function call promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCall(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCall(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call weight promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeight(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeight(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a transfer promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    transfer(amount) {\n        return this.addAction(new Transfer(amount));\n    }\n    /**\n     * Creates a stake promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    stake(amount, publicKey) {\n        return this.addAction(new Stake(amount, publicKey));\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     */\n    addFullAccessKey(publicKey) {\n        return this.addFullAccessKeyWithNonce(publicKey, 0n);\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    addFullAccessKeyWithNonce(publicKey, nonce) {\n        return this.addAction(new AddFullAccessKey(publicKey, nonce));\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     */\n    addAccessKey(publicKey, allowance, receiverId, functionNames) {\n        return this.addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, 0n);\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, nonce) {\n        return this.addAction(new AddAccessKey(publicKey, allowance, receiverId, functionNames, nonce));\n    }\n    /**\n     * Creates a delete key promise action and adds it to the current promise.\n     *\n     * @param publicKey - The public key to delete from the account.\n     */\n    deleteKey(publicKey) {\n        return this.addAction(new DeleteKey(publicKey));\n    }\n    /**\n     * Creates a delete account promise action and adds it to the current promise.\n     *\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    deleteAccount(beneficiaryId) {\n        return this.addAction(new DeleteAccount(beneficiaryId));\n    }\n    /**\n     * Joins the provided promise with the current promise, making the current promise a joint promise subtype.\n     *\n     * @param other - The promise to join with the current promise.\n     */\n    and(other) {\n        const subtype = new PromiseJoint(this, other, null);\n        return new NearPromise(subtype, false);\n    }\n    /**\n     * Adds a callback to the current promise.\n     *\n     * @param other - The promise to be executed as the promise.\n     */\n    then(other) {\n        assert(other.subtype instanceof PromiseSingle, \"Cannot callback joint promise.\");\n        assert(other.subtype.after === null, \"Cannot callback promise which is already scheduled after another\");\n        other.subtype.after = this;\n        return other;\n    }\n    /**\n     * Sets the shouldReturn field to true.\n     */\n    asReturn() {\n        this.shouldReturn = true;\n        return this;\n    }\n    /**\n     * Recursively goes through the current promise to get the promise index.\n     */\n    constructRecursively() {\n        const result = this.subtype.constructRecursively();\n        if (this.shouldReturn) {\n            near.promiseReturn(result);\n        }\n        return result;\n    }\n    /**\n     * Called by NearBindgen, when return object is a NearPromise instance.\n     */\n    onReturn() {\n        this.asReturn().constructRecursively();\n    }\n}\n","export function assert(statement, message) {\n  if (!statement) {\n    throw Error(message)\n  }\n}\n\nexport function ensure_all_arguments_gets_passed_in(expected_value, actual_value) {\n  let expected_value_is_array_condition = Array.isArray(expected_value)\n  let actual_value_is_array_condition = Array.isArray(actual_value)\n  let same_length_condition = expected_value.length === actual_value.length\n  let all_items_match = expected_value.every((val, index) => val === actual_value[index])\n  assert(expected_value_is_array_condition && actual_value_is_array_condition && same_length_condition && all_items_match, `An invalid parameter or an invalid number of parameters was passed.`)\n}","import {\n  NearBindgen,\n  near,\n  call,\n  view,\n  LookupMap,\n  UnorderedMap,\n  NearPromise,\n  UnorderedSet,\n  initialize,\n} from \"near-sdk-js\";\nimport { assert, ensure_all_arguments_gets_passed_in } from './utils';\n\ninterface order_struct {\n  product_id: string;\n  order_id: bigint;\n  memo: string;\n  amount: bigint;\n  present_order_status_changed_timestamp: bigint;\n  order_made_timestamp: bigint;\n  order_owner: string;\n  farmer_address: string;\n  present_order_status: Status;\n  order_started: boolean;\n  product_price: bigint;\n  delivery_confirmed: boolean;\n  order_quantity: bigint;\n  refund_requested: boolean;\n  refund_approved: boolean;\n  dispute_created: boolean;\n  buyer_dispute_won: boolean;\n  buyer_dispute_reason: string;\n  to_pay: string;\n}\ninterface farm_order {\n  available: is_available;\n  farmers_address: string;\n  timestamp: bigint;\n  product_cost: bigint;\n  quantity_listed: bigint;\n  last_edited_time_stamp: bigint;\n  product_unit: string;\n}\n\nenum Status {\n  ORDER_OPEN = \"ORDER OPEN\",\n  ORDER_CONFIRMED = \"ORDER CONFIRMED\",\n  DISPUTE_CREATED = \"DISPUTE CREATED\",\n  BUYER_LOST_DISPUTE = \"BUYER LOST DISPUTE\",\n  BUYER_WON_DISPUTE = \"BUYER WON DISPUTE\",\n  DISPUTE_SETTLED = \"DISPUTE SETTLED\",\n  RETURNING_GOODS_TO_FARMER = \"RETURNING GOODS TO FARMER\",\n  GOODS_DELIVERED_TO_FARMER = \"GOODS RETURNED TO FARMER\",\n  DELIVERING_GOODS = \"DELIVERING GOODS\",\n  GOODS_DELIVERED = \"GOODS DELIVERED\",\n  DISPUTED_ORDER_CLOSED = \"DISPUTED ORDER CLOSED\",\n  ORDER_CLOSED = \"ORDER CLOSED\",\n  ORDER_COMPLETED = \"ORDER COMPLETED\",\n}\n\nenum order_completed {\n  NO = \"NO\",\n  YES = \"YES\",\n}\n\nenum is_available {\n  NO = \"NO\",\n  YES = \"YES\",\n}\n\nconst SECONDS_TO_NANO_SECONDS: bigint = 10n ** 9n;\n\n\n// const DAY_TIMESTAMP: bigint = 0n;\n// const WEEK_TIMESTAMP: bigint = 0n;\n\n\nconst DAY_TIMESTAMP: bigint = 86400n * SECONDS_TO_NANO_SECONDS as bigint;\nconst WEEK_TIMESTAMP: bigint = 604800n * SECONDS_TO_NANO_SECONDS;\nconst MINIMUM_PRODUCT_PRICE: bigint = 0n;\nconst eFama_funds_address: string = \"efarma_marketplace.testnet\";\n\n\n//we want to send a minimum price that we can use to revert the transaction\n//a function to check order status\n@NearBindgen({ requireInit: true })\nclass eFamaMarketPlace {\n  moderator_addresses: UnorderedSet<string>;\n  escrow_balance: bigint;\n  escrow_fee: bigint;\n  total_items: bigint;\n  total_confirmed: bigint;\n  total_disputed: bigint;\n  active_disputes: [bigint, bigint[]];\n  orders: UnorderedMap<order_struct>;\n  orders_by_product_id: LookupMap<Array<order_struct>>;\n  orders_by_address: LookupMap<Array<order_struct>>;\n  address_of_order_id: LookupMap<string>;\n  is_completed: LookupMap<order_completed>;\n  disputed_orders: LookupMap<boolean>;\n  refunded_orders: LookupMap<boolean>;\n  farmers_products: LookupMap<farm_order>;\n  contract_deployed_timestamp: bigint;\n  minimum_order_amount: bigint;\n\n  constructor() {\n    this.moderator_addresses = new UnorderedSet(\"moderator_address\")\n    this.escrow_balance = 0n;\n    this.escrow_fee = 25n;\n    this.total_items = 0n;\n    this.total_confirmed = 0n;\n    this.total_disputed = 0n;\n    this.active_disputes = [0n, []];\n    this.orders = new UnorderedMap(\"orders\");\n    this.orders_by_product_id = new LookupMap(\"orders_by_product_id\");\n    this.orders_by_address = new LookupMap(\"orders_by_address\");\n    this.address_of_order_id = new LookupMap(\"address_of_order_id\");\n    this.is_completed = new LookupMap(\"is_completed\");\n    this.farmers_products = new LookupMap(\"farm_products\");\n    this.contract_deployed_timestamp = near.blockTimestamp() as bigint;\n    this.disputed_orders = new LookupMap(\"disputed_orders\");\n    this.refunded_orders = new LookupMap(\"refunded_orders\");\n    this.minimum_order_amount = MINIMUM_PRODUCT_PRICE;\n  }\n\n  @initialize({})\n  //initialize the contract with the moderator address\n  init({ moderator_address }: { moderator_address: string }): boolean {\n    this.moderator_addresses.set(moderator_address);\n    return this.moderator_addresses.contains(moderator_address);\n  }\n\n  @view({})\n  //fetch the total balance present in the smart contract on this efama smart contract\n  get_present_efama_balance(): string {\n    return this.escrow_balance.toString();\n  }\n\n  @view({})\n  //fetch the present commission being charged by efama on this efama smart contract\n  get_efama_commision_fee(): string {\n    return this.escrow_fee.toString();\n  }\n\n  @view({})\n  //fetch the total number of completed orders on this efama smart contract\n  get_efama_total_confirmed(): string {\n    return this.total_confirmed.toString();\n  }\n\n  @view({})\n  //fetch the total number of previously disputed orders on this efama smart contract\n  get_efama_total_disputes(): string {\n    return this.total_disputed.toString();\n  }\n\n  @view({})\n  //fetch an array of all the orders made on this efama smart contract\n  get_all_efama_orders({ }): object[] {\n    if (this.orders.length < 1) [];\n    let all_orders = this.orders;\n    // let temp_array: UnorderedSet<order_struct> = new UnorderedSet('temp_array')\n    let temp_array: order_struct[] = [];\n    for (let [key, order] of all_orders) {\n      temp_array.push(order);\n    }\n    return temp_array;\n  }\n\n\n  @view({})\n  //fetch a product by it's product id. \n  view_farmers_listed_products({ product_id }: { product_id: string }): object {\n    let function_arguments = Object.keys({ \"product_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    if (!this.farmers_products.containsKey(product_id)) return {};\n    return this.farmers_products.get(product_id);\n  }\n\n  @view({})\n  //** */\n  //fetch an order by it's order id \n  get_order_status_by_order_id({ order_id }: { order_id: string }): object {\n    let function_arguments = Object.keys({ \"order_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    let order_details: order_struct = this.orders.get(order_id);\n    return order_details ? order_details : {};\n  }\n\n  @view({})\n  //fetch all orders made by a single account using the account address.\n  get_orders_by_an_address({\n    owner_address,\n  }: {\n    owner_address: string;\n  }): object[] {\n    let order_found_for_this_address_condition = this.orders_by_address.containsKey(owner_address)\n    let function_arguments = Object.keys({ \"owner_address\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    let unordered_orders_array = this.orders_by_address.get(owner_address);\n    return order_found_for_this_address_condition ? unordered_orders_array : [];\n  }\n\n\n  @view({})\n  //fetch the address of the person who created an order by it's order id\n  get_owner_of_order_by_order_id({ order_id }: { order_id: string }): string {\n    let address_has_created_an_order_condition = this.address_of_order_id.containsKey(order_id)\n    let function_arguments = Object.keys({ \"order_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    return address_has_created_an_order_condition ? this.address_of_order_id.get(order_id) : '';\n  }\n\n  @view({})\n  //fetch all orders made for a single product using it's product id\n  get_all_orders_made_for_a_product({\n    product_id,\n  }: {\n    product_id: string;\n  }): object {\n    let product_id_found_condition = this.address_of_order_id.containsKey(product_id)\n    let function_arguments = Object.keys({ \"product_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    return product_id_found_condition ? this.orders_by_product_id.get(product_id) : {};\n  }\n\n\n  @view({})\n  //fetch an array of the moderator addresses added to this efama smart contractf\n  get_efama_moderator_addresses({ }): string[] {\n    assert(!this.moderator_addresses.isEmpty(), 'There is nothing to display')\n    let moderator_address_array = this.moderator_addresses.toArray();\n    return moderator_address_array\n  }\n\n\n\n  @call({})\n  //remove a previously added efama moderator address and return the status of the transaction as either true or false\n  remove_efama_moderator_account({\n    moderator_address,\n  }: {\n    moderator_address: string;\n  }): boolean {\n    let function_arguments = Object.keys({ \"moderator_address\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    assert(\n      this.moderator_addresses.contains(near.predecessorAccountId()),\n      \"The address doesn't belong to a moderator'\"\n    );\n    assert(this.moderator_addresses.length >= 1, 'There is only one address present, you might get locked out.')\n    near.log(` eFama Moderator Account Removed - ${moderator_address}`);\n    this.moderator_addresses.remove(moderator_address);\n    return !this.moderator_addresses.contains(moderator_address);\n  }\n\n  @call({})\n  // This method changes the state, for which it cost gas\n  //add to the previously added moderator addresses on this efama smart contract\n  add_another_efama_moderator_account({\n    moderator_address,\n  }: {\n    moderator_address: string;\n  }): boolean {\n    let function_arguments = Object.keys({ \"moderator_address\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    assert(\n      this.moderator_addresses.contains(near.predecessorAccountId()),\n      \"Only moderators are allowed to add other moderators :)\"\n    );\n    near.log(`New eFama Moderator Account - ${moderator_address} Added.`);\n    this.moderator_addresses.set(moderator_address);\n    return this.moderator_addresses.contains(moderator_address);\n  }\n\n  @call({})\n  //create a farm product listing. Change the state of the farmers_object attribute. The product must cost more than the minimum price set for every product. \n  create_a_farm_product_listing({\n    product_id,\n    product_cost,\n    quantity_listed,\n    product_unit,\n    edit_status\n  }: {\n    product_id: string;\n    product_cost: bigint;\n    quantity_listed: bigint;\n    product_unit: string;\n    edit_status: string\n  }): boolean {\n    let function_arguments = Object.keys({ product_id: 1, product_cost: 1, quantity_listed: 1, product_unit: 1, edit_status: 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    let product_id_exists_condition = this.farmers_products.containsKey(product_id)\n\n    let product_id_exists_and_product_creator_calls_method = product_id_exists_condition && (this.farmers_products.get(product_id)?.farmers_address === near.predecessorAccountId())\n    let edit_condition = edit_status.toLowerCase().trim() === \"true\"\n    let product_exists_and_edit_clause_triggered_by_owner_condition = product_id_exists_and_product_creator_calls_method && edit_condition\n\n\n    let farm_data_obj: farm_order\n    let correct_metric_unit_input_condition = (product_unit.toLowerCase() === \"g\" || product_unit.toLowerCase() === \"ml\") ? true : false;\n    assert(\n      product_cost > this.minimum_order_amount,\n      \"The product costs less than the minimum price for listable goods.\"\n    );\n    assert(!product_id_exists_condition || product_exists_and_edit_clause_triggered_by_owner_condition, 'There is already a product listed with this product id and you are not the owner.')\n    assert(\n      correct_metric_unit_input_condition,\n      \"You used the wrong unit for your product. Only grams (g) and millilitres (ml) are presently supported\"\n    );\n    if (product_exists_and_edit_clause_triggered_by_owner_condition) {\n      farm_data_obj = {\n        ...this.farmers_products.get(product_id), last_edited_time_stamp: near.blockTimestamp(), quantity_listed, product_unit, product_cost, available: is_available.YES\n      }\n    }\n    else {\n      farm_data_obj = {\n        available: is_available.YES,\n        farmers_address: near.predecessorAccountId(),\n        timestamp: near.blockTimestamp(),\n        last_edited_time_stamp: near.blockTimestamp(),\n        product_cost,\n        quantity_listed,\n        product_unit\n      };\n    }\n    this.farmers_products.set(product_id, farm_data_obj);\n    return this.farmers_products.containsKey(product_id);\n  }\n\n\n  @call({})\n  //delete a farmer product listing. Must be called by the farmer that listed it\n  delete_farmer_product_listing({\n    product_id,\n  }: {\n    product_id: string;\n  }): boolean {\n    let function_arguments = Object.keys({ \"product_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    // check that the product exists first\n    let product_details = this.farmers_products.get(product_id);\n    let product_orders = this.orders_by_product_id.get(product_id);\n    let product_found_using_id_condition = this.orders_by_product_id.containsKey(product_id);\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    assert(\n      this.farmers_products.containsKey(product_id),\n      \"The product with the specified product id was not found.\"\n    );\n    assert(\n      product_details.farmers_address === near.predecessorAccountId(),\n      \"You are not the product owner. Kindly use a product id that you own\"\n    );\n    //assert that the array is not empty\n    if (product_found_using_id_condition && product_orders.length > 0) {\n      for (let order of product_orders) {\n        assert(\n          order.present_order_status === Status.ORDER_CLOSED,\n          \"There is a pending order.\"\n        );\n      }\n    }\n    this.farmers_products.remove(product_id);\n    near.log([\n      `The product with product id of (${product_id}) was successfully deleted`,\n    ]);\n    return this.farmers_products.containsKey(product_id);\n  }\n\n  //place an order for a listed product id. \n  @call({ payableFunction: true })\n  place_an_order_for_a_product_listing({\n    product_id,\n    memo,\n    order_quantity,\n    product_listed_unit,\n  }: {\n    product_id: string;\n    memo: string;\n    order_quantity: bigint;\n    product_listed_unit: string;\n  }): object {\n    let function_arguments = Object.keys({ product_id: 1, memo: 1, order_quantity: 1, product_listed_unit: 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    let listed_product = this.farmers_products.get(product_id);\n    let product_found = this.farmers_products.containsKey(product_id);\n\n    //throw error if product was not found\n    assert(product_found, \"The product with the product id specified wasn't found.\");\n    assert(\n      product_listed_unit.toLowerCase() ===\n      listed_product.product_unit.toLowerCase(),\n      `You used the wrong metric unit`\n    );\n    assert(\n      listed_product.quantity_listed - order_quantity >= 0n,\n      `There isn't enough produce to complete your order. There is just ${listed_product.quantity_listed} (${listed_product.product_unit}) units left`\n    );\n\n\n\n    assert(\n      near.attachedDeposit() ===\n      BigInt(listed_product.product_cost) * BigInt(order_quantity),\n      `You sent ${near.attachedDeposit()} Near. Instead of ${listed_product.product_cost * order_quantity\n      }`\n    );\n\n    assert(\n      listed_product.available === is_available.YES,\n      \"Sorry, this product is no longer available.\"\n    );\n\n\n    let total_order_cost = BigInt(listed_product.product_cost) * BigInt(order_quantity);\n    this.total_items += 1n;\n\n\n    let order: order_struct = {\n      product_id: product_id,\n      order_id: this.total_items as bigint,\n      memo: memo,\n      farmer_address: listed_product.farmers_address,\n      present_order_status: Status.ORDER_OPEN,\n      present_order_status_changed_timestamp: near.blockTimestamp() as bigint,\n      order_quantity: order_quantity as bigint,\n      order_started: false,\n      delivery_confirmed: false,\n      product_price: listed_product.product_cost,\n      amount: total_order_cost as bigint,\n      order_made_timestamp: near.blockTimestamp() as bigint,\n      refund_requested: false,\n      refund_approved: false,\n      dispute_created: false,\n      buyer_dispute_won: false,\n      buyer_dispute_reason: '',\n      to_pay: listed_product.farmers_address,\n      order_owner: near.predecessorAccountId(),\n    };\n\n    this.orders.set(order.order_id.toString(), order);\n\n    let orders_by_product_id_unordered_set: Array<order_struct> =\n      this.orders_by_product_id.containsKey(order.product_id)\n        ? this.orders_by_product_id.get(order.product_id)\n        : [];\n    orders_by_product_id_unordered_set.push(order);\n\n    this.orders_by_product_id.set(\n      order.product_id,\n      orders_by_product_id_unordered_set\n    );\n\n\n    let orders_by_address_unordered_set: Array<order_struct> =\n      this.orders_by_address.containsKey(order.order_owner)\n        ? this.orders_by_address.get(order.order_owner)\n        : [];\n\n    orders_by_address_unordered_set.push(order);\n\n    this.orders_by_address.set(\n      order.order_owner,\n      orders_by_address_unordered_set\n    );\n\n    this.address_of_order_id.set(\n      order.order_id.toString(),\n      near.predecessorAccountId()\n    );\n\n    this.is_completed.set(order.order_id.toString(), order_completed.NO);\n\n    this.escrow_balance += near.attachedDeposit();\n    listed_product.quantity_listed = BigInt(listed_product.quantity_listed) - BigInt(order_quantity)\n\n    if (BigInt(listed_product.quantity_listed) <= 0n) {\n      listed_product.available = is_available.NO\n      this.farmers_products.set(product_id, listed_product)\n    }\n    near.log([\n      product_id,\n      \"NEW ORDER\",\n      Status.ORDER_OPEN,\n      near.predecessorAccountId(),\n    ]);\n    return this.orders.get(order.order_id.toString());\n  }\n\n  @call({})\n  accept_buyers_order({ order_id }: { order_id: string }): boolean {\n    let function_arguments = Object.keys({ \"order_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    let order_details = this.orders.get(order_id);\n    let order_farmers_address = order_details.farmer_address;\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    assert(order_details != null, \"Invalid order_id used.\");\n\n    assert(\n      order_details.present_order_status === Status.ORDER_OPEN,\n      \"Order has already been accepted by the farmer\"\n    );\n    assert(\n      order_farmers_address === near.predecessorAccountId(),\n      \"Only the account that was used to list the product can accept it's product orders\"\n    );\n    assert(\n      this.is_completed.get(order_id) === order_completed.NO,\n      \"The order has been completed\"\n    );\n\n    order_details.present_order_status = Status.ORDER_CONFIRMED;\n    order_details.order_started = true\n    order_details.present_order_status_changed_timestamp =\n      near.blockTimestamp();\n\n    let farmers_product = this.farmers_products.get(order_details.product_id)\n    farmers_product.quantity_listed -= order_details.order_quantity;\n    this.farmers_products.set(order_details.product_id, farmers_product)\n    this.orders.set(order_id, order_details);\n    return this.orders.get(order_id).order_started;\n  }\n\n  //how should the dispute be settled, once a refund is\n  @call({})\n  change_order_status_to_delivery_started({\n    order_id,\n  }: {\n    order_id: string;\n  }): boolean {\n    let function_arguments = Object.keys({ \"order_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    let order_details = this.orders.get(order_id);\n    let order_farmers_address = order_details.farmer_address;\n\n\n    //only trigger when the order is still in the confirmation stage\n    assert(\n      order_details != null,\n      \"The order id wasn't found.\"\n    );\n    assert(\n      order_farmers_address === near.predecessorAccountId(),\n      \"Only the product owner can make changes to this order.\"\n    );\n    assert(\n      this.is_completed.get(order_id) === order_completed.NO,\n      \"The order has been completed.\"\n    );\n\n    assert(\n      order_details.present_order_status === Status.ORDER_CONFIRMED,\n      \"The status of the delivery must be order confirmed to call this function. You might have already called this order or you must first confirm the order.\"\n    );\n\n\n    // only trigger when the product is in the proper status\n    // only trigger when the order is still available\n    //can only be triggered by the farmer\n\n    order_details.present_order_status = Status.DELIVERING_GOODS;\n    order_details.present_order_status_changed_timestamp =\n      near.blockTimestamp();\n    this.orders.set(order_id, order_details);\n    near.log([\n      order_id,\n      \"DELIVERY HAS BEEN INITIATED\",\n      Status.DELIVERING_GOODS,\n      near.predecessorAccountId(),\n    ]);\n    return this.orders.get(order_id).present_order_status === Status.DELIVERING_GOODS;\n  }\n\n  @call({})\n  confirm_order_has_been_delivered({\n    order_id,\n  }: {\n    order_id: string;\n  }): boolean {\n    let function_arguments = Object.keys({ \"order_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    let order_details = this.orders.get(order_id);\n    assert(\n      order_details != null,\n      \"The order id wasn't found.\"\n    );\n\n    assert(\n      order_details.farmer_address === near.predecessorAccountId(),\n      \"Only the product owner can make changes to this order.\"\n    );\n    assert(\n      this.is_completed.get(order_id) === order_completed.NO,\n      \"The order has been completed.\"\n    );\n\n    assert(\n      order_details.present_order_status === Status.DELIVERING_GOODS,\n      \"The order has already been marked as delivered or you've yet to indicate that the shipment has started.\"\n    );\n\n\n    order_details.delivery_confirmed = true;\n    order_details.present_order_status = Status.GOODS_DELIVERED;\n    order_details.present_order_status_changed_timestamp =\n      near.blockTimestamp();\n    this.orders.set(order_id, order_details);\n\n    return this.orders.get(order_id).present_order_status === Status.GOODS_DELIVERED;\n  }\n\n  @call({})\n  mark_order_as_completed({ order_id }: { order_id: string }): boolean {\n    let function_arguments = Object.keys({ \"order_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    let order_details = this.orders.get(order_id);\n\n    //only trigger when the order is still in the confirmation stage\n    assert(\n      order_details != null,\n      \"The order id wasn't found.\"\n    );\n\n    assert(\n      order_details.order_owner === near.predecessorAccountId(),\n      \"Only the buyer can make indicate the order has been completed.\"\n    );\n\n    assert(\n      this.is_completed.get(order_id) === order_completed.NO,\n      \"The order has been completed.\"\n    );\n\n\n    assert(\n      order_details.present_order_status === Status.GOODS_DELIVERED ||\n      order_details.present_order_status === Status.DISPUTE_CREATED,\n      \"Only orders that have been delivered or have just had a dispute created can be marked as completed\"\n    );\n\n\n    this.is_completed.set(order_id, order_completed.YES)\n    order_details.present_order_status = Status.ORDER_CLOSED;\n    order_details.present_order_status_changed_timestamp =\n      near.blockTimestamp();\n    this.orders.set(order_id, order_details);\n    near.log([\n      order_id,\n      \"ORDER COMPLETED\",\n      Status.ORDER_CLOSED,\n      near.predecessorAccountId(),\n    ]);\n    return this.is_completed.get(order_id) === order_completed.YES;\n  }\n\n  //the service hasn't been set as delivery_confirmed by the user and only the escrow is allowed to call the function\n  @call({})\n  request_an_order_refund({ order_id }: { order_id: string }): boolean {\n    let function_arguments = Object.keys({ \"order_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    let order_details = this.orders.get(order_id);\n    let order_was_made_less_than_12_hours_ago_condition = (order_details.order_made_timestamp + (DAY_TIMESTAMP / 2n)) >\n      near.blockTimestamp()\n    //only trigger when the order is still in the confirmation stage\n    assert(\n      order_details.present_order_status === Status.ORDER_OPEN,\n      \"The order status must be set as open for a refund to be issued.\"\n    );\n\n    assert(\n      order_was_made_less_than_12_hours_ago_condition,\n      \"All orders older than 12 hours can't be refunded.\"\n    );\n\n    assert(\n      order_details.order_owner === near.predecessorAccountId(),\n      \"Only the buyer can request for a refund for this order\"\n    );\n\n    assert(\n      this.is_completed.get(order_id) === order_completed.NO,\n      \"The order has been completed.\"\n    );\n\n    order_details.refund_requested = true;\n    order_details.refund_approved = true;\n    order_details.present_order_status_changed_timestamp = near.blockTimestamp();\n    order_details.to_pay = order_details.order_owner\n    order_details.present_order_status = Status.ORDER_CLOSED;\n    this.orders.set(order_id, order_details);\n    this.is_completed.set(order_id, order_completed.YES)\n    near.log([\n      order_id,\n      \"REFUND REQUESTED\",\n      Status.ORDER_CLOSED,\n      near.predecessorAccountId(),\n    ]);\n    return this.orders.get(order_id).refund_approved;\n  }\n\n  @call({})\n  create_dispute_for_a_delivered_order({\n    order_id,\n    dispute_reason\n  }: {\n    order_id: string;\n    dispute_reason: string;\n  }): boolean {\n    let function_arguments = Object.keys({ \"order_id\": 1, \"dispute_reason\": \"dispute reason\" })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    let order_details = this.orders.get(order_id);\n\n    let order_is_delivered_condition =\n      order_details.present_order_status === Status.GOODS_DELIVERED;\n    let present_moment_timestamp = BigInt(near.blockTimestamp());\n\n    let timestamp_24_hours_after_order_delivery =\n      BigInt(order_details.present_order_status_changed_timestamp) + BigInt(DAY_TIMESTAMP);\n    let order_delivered_less_than_24_hours_ago_condition =\n      present_moment_timestamp <= timestamp_24_hours_after_order_delivery;\n\n\n    assert(order_details !== null, `The order with the specified order id wasn't found.`)\n\n    assert(\n      this.is_completed.get(order_id) === order_completed.NO,\n      \"The order has been marked as completed\"\n    );\n\n    assert(\n      order_details.order_owner === near.predecessorAccountId(),\n      \"Only the owner of the order can create a dispute\"\n    );\n\n    assert(\n      order_is_delivered_condition &&\n      order_delivered_less_than_24_hours_ago_condition,\n      `Only orders that have been marked as delivered less than a day ago are eligble to create disputes`\n    );\n\n\n    order_details.present_order_status = Status.DISPUTE_CREATED;\n\n    order_details.present_order_status_changed_timestamp =\n      near.blockTimestamp();\n    order_details.buyer_dispute_reason = dispute_reason;\n    order_details.dispute_created = true;\n    this.orders.set(order_id, order_details);\n    this.total_disputed++;\n    return this.orders.get(order_id).dispute_created;\n  }\n\n  @call({})\n\n  update_client_dispute_request({\n    order_id,\n    status,\n  }: {\n    order_id: string;\n    status: string;\n  }): string {\n    let function_arguments = Object.keys({ \"order_id\": 1, \"status\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    // we want to check that if we have changed the status to completed, then we only have about 2 days to re-edit it\n\n    let order_details = this.orders.get(order_id);\n\n    let less_than_a_day_after_order_status_updated_condition = (order_details.present_order_status_changed_timestamp + DAY_TIMESTAMP) > (near.blockTimestamp())\n    let dispute_created_condition = order_details.present_order_status === Status.DISPUTE_CREATED\n\n    let dispute_settlement_adjustment_condition = ((order_details.present_order_status === Status.BUYER_LOST_DISPUTE) || (order_details.present_order_status === Status.BUYER_WON_DISPUTE)) && less_than_a_day_after_order_status_updated_condition\n\n    assert(\n      this.moderator_addresses.contains(near.predecessorAccountId()),\n      \"Only moderators are allowed to update the status of a disputed order.\"\n    );\n    assert(\n      this.is_completed.get(order_id) === order_completed.NO,\n      \"The order has been completed\"\n    );\n\n    assert(\n      dispute_created_condition || dispute_settlement_adjustment_condition,\n      \"There is either no dispute for this present order or you've exceeded the timeframe for changing your decision.\"\n    );\n\n    //we want to revert everything here,\n    // we want to set the order status to closed and transfer the money back to the seller, charging them for gas\n    if (status.toLowerCase().trim() === \"accept\") {\n      order_details.buyer_dispute_won = true;\n      order_details.present_order_status_changed_timestamp =\n        near.blockTimestamp();\n      order_details.present_order_status = Status.BUYER_WON_DISPUTE;\n      order_details.to_pay = order_details.order_owner\n\n    }\n    else if (status.toLowerCase().trim() === \"reject\") {\n      order_details.buyer_dispute_won = false;\n      order_details.present_order_status_changed_timestamp =\n        near.blockTimestamp();\n      order_details.present_order_status = Status.BUYER_LOST_DISPUTE;\n      order_details.to_pay = order_details.farmer_address\n      near.log([\n        `ORDER WITH ORDER_ID ${order_id} DISPUTE HAS BEEN SETTLED`,\n        Status.BUYER_LOST_DISPUTE,\n        near.predecessorAccountId(),\n      ]);\n      //we want to revert the state here\n    }\n    //if it is sucessful then transfer the funds and charge them for the gas\n    this.orders.set(order_id, order_details);\n    near.log([\n      order_id,\n      `${status.toUpperCase()}: BUYER ORDER DISPUTE SETTLED`,\n      order_details.present_order_status,\n      near.predecessorAccountId(),\n    ]);\n    return order_details.present_order_status;\n  }\n\n  @call({})\n  //change the status of a disputed order to delivery started. Dispute must have been won to call this method.\n  change_dispute_order_status_to_delivery_started({\n    order_id,\n  }: {\n    order_id: string;\n  }): boolean {\n    let function_arguments = Object.keys({ \"order_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n\n    let order_details = this.orders.get(order_id);\n\n    let dispute_settled_condition =\n      order_details.present_order_status === Status.BUYER_WON_DISPUTE;\n\n    assert(order_details != null, \"The order id specified wasn't found\")\n    assert(\n      this.is_completed.get(order_id) === order_completed.NO,\n      \"The order has been completed.\"\n    );\n    assert(\n      order_details.order_owner === near.predecessorAccountId(),\n      \"Only the owner of the order can indicate shipment has started to the farmer (seller)\"\n    );\n    assert(\n      dispute_settled_condition,\n      \"The order status can only be changed when the buyers dispute has been marked as won. Kindly ensure you haven't called this function before.\"\n    );\n\n\n    order_details.present_order_status = Status.RETURNING_GOODS_TO_FARMER;\n    order_details.present_order_status_changed_timestamp =\n      near.blockTimestamp();\n    this.orders.set(order_id, order_details);\n    near.log([\n      order_id,\n      \"DELIVERY HAS BEEN INITIATED\",\n      Status.DELIVERING_GOODS,\n      near.predecessorAccountId(),\n    ]);\n    return true;\n  }\n\n  //change the status of a disputed order to delivered, must order id must indicate that the shipment has started to call this method.\n  @call({})\n  change_dispute_order_status_to_delivered({\n    order_id,\n  }: {\n    order_id: string;\n  }): boolean {\n    let function_arguments = Object.keys({ \"order_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n\n    let order_details = this.orders.get(order_id);\n    let shipment_started_to_farmer_condition = order_details.present_order_status === Status.RETURNING_GOODS_TO_FARMER\n\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    assert(order_details != null, \"The order id specified wasn't found\")\n    assert(\n      shipment_started_to_farmer_condition,\n      \"The order has not yet been marked as being delivered to the farmer.\"\n    );\n\n    assert(\n      order_details.order_owner === near.predecessorAccountId(),\n      \"Only the owner of the order can indicate that the order has been delivered to the selelr\"\n    );\n    assert(\n      this.is_completed.get(order_id) === order_completed.NO,\n      \"The order has already been marked as completed\"\n    );\n\n\n    order_details.present_order_status = Status.GOODS_DELIVERED_TO_FARMER;\n    order_details.present_order_status_changed_timestamp =\n      near.blockTimestamp();\n    this.orders.set(order_id, order_details);\n    near.log([\n      `The order with order_id ${order_id} of has been sent back to the farmer`,\n      Status.GOODS_DELIVERED_TO_FARMER,\n      near.predecessorAccountId(),\n    ]);\n    return this.orders.get(order_id).present_order_status === Status.GOODS_DELIVERED_TO_FARMER;;\n  }\n\n  //mark disputed order as completed\n  @call({})\n  mark_disputed_order_as_completed({\n    order_id,\n  }: {\n    order_id: string;\n  }): boolean {\n    let function_arguments = Object.keys({ \"order_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    let order_details = this.orders.get(order_id);\n\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    assert(order_details != null, \"The order id specified wasn't found\")\n    assert(\n      order_details.present_order_status === Status.GOODS_DELIVERED_TO_FARMER,\n      \"Order hasn't yet been marked as delivered by buyer\"\n    );\n\n    assert(\n      order_details.farmer_address === near.predecessorAccountId(),\n      \"Only the seller for this order can indicate they've received shipment from the buyer\"\n    );\n\n    assert(\n      this.is_completed.get(order_id) === order_completed.NO,\n      \"The order has been completed\"\n    );\n    order_details.delivery_confirmed = true;\n    order_details.present_order_status = Status.DISPUTED_ORDER_CLOSED;\n    order_details.present_order_status_changed_timestamp =\n      near.blockTimestamp();\n    order_details.to_pay = order_details.order_owner\n    this.orders.set(order_id, order_details);\n    this.is_completed.set(order_id, order_completed.YES)\n\n    near.log([\n      order_id,\n      \"GOODS SUCCESSFULLY RETURNED TO THE FARMER\",\n      Status.DISPUTED_ORDER_CLOSED,\n      near.predecessorAccountId(),\n    ]);\n    return this.orders.get(order_id).present_order_status === Status.DISPUTED_ORDER_CLOSED;\n  }\n\n  @call({})\n  // withdraw payment for an order, depending on who's eligible\n  withdraw_payment_for_order({ order_id }: { order_id: string }): NearPromise {\n    let order_details: order_struct = this.orders.get(order_id);\n    let function_arguments = Object.keys({ \"order_id\": 1 })\n    let passed_in_arguments = Object.keys(arguments[0])\n    let a_week_passed_since_order_status_was_updated = ((BigInt(order_details.present_order_status_changed_timestamp) + BigInt(WEEK_TIMESTAMP)) < BigInt(near.blockTimestamp()))\n    let receiver_address: string = order_details.to_pay;\n    let contract_deployed_day = new Date(Number(this.contract_deployed_timestamp) / 10 ** 6).getDay();\n    let present_day = new Date(Number(near.blockTimestamp()) / 10 ** 6).getDay();\n    let order_has_been_closed_condition = order_details.present_order_status === Status.ORDER_CLOSED\n    let buyer_lost_dispute_condition = order_details.present_order_status === Status.BUYER_LOST_DISPUTE\n    let a_week_after_seller_won_dispute_condition = buyer_lost_dispute_condition && a_week_passed_since_order_status_was_updated\n    let withdrawal_address_eligible_condition = order_details.to_pay === near.predecessorAccountId()\n    let withdrawal_day_condition = present_day === contract_deployed_day\n    let refund_approved_for_order_condition = (order_details.refund_approved === true) && order_has_been_closed_condition\n    let farmer_eligible_to_be_paid = (order_details.to_pay === order_details.farmer_address)\n    let buyer_won_dispute_and_24_hours_has_passed = (order_details.present_order_status === Status.DISPUTED_ORDER_CLOSED) && ((order_details.present_order_status_changed_timestamp + DAY_TIMESTAMP) < near.blockTimestamp())\n    let order_confirmed_atleast_a_week_ago_condition = order_has_been_closed_condition && a_week_passed_since_order_status_was_updated\n    let farmer_order_confirmed_a_week_ago_and_eligble_for_withdrawal = order_confirmed_atleast_a_week_ago_condition && farmer_eligible_to_be_paid\n    let refund_approved_or_farmer_order_closed_or_seller_won_dispute_or_buyer_won_dispute_condition = refund_approved_for_order_condition || farmer_order_confirmed_a_week_ago_and_eligble_for_withdrawal || a_week_after_seller_won_dispute_condition || buyer_won_dispute_and_24_hours_has_passed\n    ensure_all_arguments_gets_passed_in(function_arguments, passed_in_arguments)\n    assert(order_details != null, \"The order id that was specified wasn't found\")\n    assert(\n      withdrawal_address_eligible_condition,\n      \"You are not the one who's supposed to be paid for this order\"\n    );\n\n    assert(withdrawal_day_condition, `Not yet pay day. Pay day is on day ${contract_deployed_day} - Today is day ${present_day}`);\n    assert(refund_approved_or_farmer_order_closed_or_seller_won_dispute_or_buyer_won_dispute_condition, 'You are not eligible for a withdrawal yet.')\n    let promise;\n    let escrow_amount: bigint = ((this.escrow_fee * BigInt(order_details.amount)) / 100n)\n    let buyer_amount = order_details.amount - escrow_amount\n    let farmers_product = this.farmers_products.get(order_details.product_id)\n\n\n    order_details.present_order_status = Status.ORDER_COMPLETED;\n    order_details.present_order_status_changed_timestamp =\n      near.blockTimestamp();\n    this.is_completed.set(order_id, order_completed.YES)\n    this.orders.set(order_id, order_details);\n    this.escrow_balance -= buyer_amount;\n\n    if (refund_approved_for_order_condition) {\n      farmers_product.quantity_listed = BigInt(farmers_product.quantity_listed) + BigInt(order_details.order_quantity)\n      promise = NearPromise.new(receiver_address).transfer(order_details.amount);\n    }\n\n    else if (a_week_after_seller_won_dispute_condition) {\n      promise = NearPromise.new(receiver_address).transfer(buyer_amount).then(NearPromise.new(eFama_funds_address).transfer(escrow_amount));\n    }\n\n    else if (farmer_order_confirmed_a_week_ago_and_eligble_for_withdrawal) {\n      promise = NearPromise.new(receiver_address).transfer(buyer_amount).then(NearPromise.new(eFama_funds_address).transfer(escrow_amount));\n    }\n    else if (buyer_won_dispute_and_24_hours_has_passed) {\n      farmers_product.quantity_listed = BigInt(farmers_product.quantity_listed) + BigInt(order_details.order_quantity)\n      promise = NearPromise.new(receiver_address).transfer(order_details.amount);\n    }\n\n    this.farmers_products.set(order_details.product_id, farmers_product)\n    this.total_confirmed = BigInt(this.total_confirmed) + 1n\n    near.log([\n      order_id,\n      \"WITHDRAWAL MADE\",\n      Status.ORDER_COMPLETED,\n      near.predecessorAccountId(),\n    ]);\n    this.escrow_balance = BigInt(this.escrow_balance) - BigInt(order_details.amount)\n    return promise.onReturn();;\n  }\n}\n"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ERR_INCONSISTENT_STATE","ERR_INDEX_OUT_OF_BOUNDS","u8ArrayToBytes","array","reduce","result","value","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","from","map","byte","charCodeAt","assert","expression","message","Error","getValueWithOptions","options","deserializer","deserialize","deserialized","undefined","defaultValue","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","_","Object","keys","length","every","includes","BigInt","PromiseResult","PromiseError","assertNumber","n","Number","isSafeInteger","chain","args","wrap","a","b","c","encode","Array","reverse","acc","i","decode","alphabet","digits","isArray","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","radix2","revPadding","unsafeWrapper","apply","e","base16","base32","s","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","str","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","CurveType","DataLength","U64_MAX","EVICTED_REGISTER","log","params","env","accumulated","parameter","param","stringified","predecessorAccountId","predecessor_account_id","read_register","currentAccountId","current_account_id","blockTimestamp","block_timestamp","attachedDeposit","attached_deposit","storageRead","returnValue","storage_read","storageHasKey","storage_has_key","storageGetEvicted","storageWrite","storage_write","storageRemove","storage_remove","promiseAnd","promiseIndexes","promise_and","promiseBatchCreate","accountId","promise_batch_create","promiseBatchThen","promiseIndex","promise_batch_then","promiseBatchActionCreateAccount","promise_batch_action_create_account","promiseBatchActionDeployContract","code","promise_batch_action_deploy_contract","promiseBatchActionFunctionCall","methodName","amount","gas","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","promiseBatchActionStake","publicKey","promise_batch_action_stake","promiseBatchActionAddKeyWithFullAccess","nonce","promise_batch_action_add_key_with_full_access","promiseBatchActionAddKeyWithFunctionCall","allowance","receiverId","methodNames","promise_batch_action_add_key_with_function_call","promiseBatchActionDeleteKey","promise_batch_action_delete_key","promiseBatchActionDeleteAccount","beneficiaryId","promise_batch_action_delete_account","promiseBatchActionFunctionCallWeight","weight","promise_batch_action_function_call_weight","promiseReturn","promise_return","initialize","_empty","_target","_key","_descriptor","view","call","privateFunction","payableFunction","descriptor","originalMethod","near","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","constructor","reconstruct","_requireInit","LookupMap","keyPrefix","containsKey","storageKey","get","remove","set","newValue","storageValue","extend","keyValuePairs","indexToKey","Uint32Array","buffer","Vector","isEmpty","swapRemove","pop","last","element","lastIndex","lastKey","elements","Symbol","iterator","VectorIterator","createIteratorWithOptions","toArray","clear","vector","current","next","UnorderedMap","values","valueAndIndex","serialized","newElementIndex","oldValue","oldIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","unorderedMap","serializeIndex","deserializeIndex","rawIndex","UnorderedSet","elementIndexPrefix","contains","indexLookup","nextIndex","nextIndexRaw","indexRaw","lastElement","lastLookupElement","elementsPrefix","PromiseAction","CreateAccount","add","DeployContract","FunctionCall","functionName","FunctionCallWeight","Transfer","Stake","AddFullAccessKey","AddAccessKey","functionNames","DeleteKey","DeleteAccount","PromiseSingle","actions","after","constructRecursively","action","PromiseJoint","promiseA","promiseB","NearPromise","subtype","shouldReturn","new","addAction","createAccount","deployContract","functionCall","functionCallWeight","transfer","stake","addFullAccessKey","addFullAccessKeyWithNonce","addAccessKey","addAccessKeyWithNonce","deleteKey","deleteAccount","and","other","then","asReturn","onReturn","statement","ensure_all_arguments_gets_passed_in","expected_value","actual_value","expected_value_is_array_condition","actual_value_is_array_condition","same_length_condition","all_items_match","val","Status","order_completed","is_available","SECONDS_TO_NANO_SECONDS","DAY_TIMESTAMP","WEEK_TIMESTAMP","MINIMUM_PRODUCT_PRICE","eFama_funds_address","eFamaMarketPlace","moderator_addresses","escrow_balance","escrow_fee","total_items","total_confirmed","total_disputed","active_disputes","orders","orders_by_product_id","orders_by_address","address_of_order_id","is_completed","farmers_products","contract_deployed_timestamp","disputed_orders","refunded_orders","minimum_order_amount","init","moderator_address","get_present_efama_balance","get_efama_commision_fee","get_efama_total_confirmed","get_efama_total_disputes","get_all_efama_orders","all_orders","temp_array","order","view_farmers_listed_products","product_id","function_arguments","passed_in_arguments","arguments","get_order_status_by_order_id","order_id","order_details","get_orders_by_an_address","owner_address","order_found_for_this_address_condition","unordered_orders_array","get_owner_of_order_by_order_id","address_has_created_an_order_condition","get_all_orders_made_for_a_product","product_id_found_condition","get_efama_moderator_addresses","moderator_address_array","remove_efama_moderator_account","add_another_efama_moderator_account","create_a_farm_product_listing","product_cost","quantity_listed","product_unit","edit_status","product_id_exists_condition","product_id_exists_and_product_creator_calls_method","farmers_address","edit_condition","trim","product_exists_and_edit_clause_triggered_by_owner_condition","farm_data_obj","correct_metric_unit_input_condition","last_edited_time_stamp","available","YES","timestamp","delete_farmer_product_listing","product_details","product_orders","product_found_using_id_condition","present_order_status","ORDER_CLOSED","place_an_order_for_a_product_listing","memo","order_quantity","product_listed_unit","listed_product","product_found","total_order_cost","farmer_address","ORDER_OPEN","present_order_status_changed_timestamp","order_started","delivery_confirmed","product_price","order_made_timestamp","refund_requested","refund_approved","dispute_created","buyer_dispute_won","buyer_dispute_reason","to_pay","order_owner","orders_by_product_id_unordered_set","orders_by_address_unordered_set","NO","accept_buyers_order","order_farmers_address","ORDER_CONFIRMED","farmers_product","change_order_status_to_delivery_started","DELIVERING_GOODS","confirm_order_has_been_delivered","GOODS_DELIVERED","mark_order_as_completed","DISPUTE_CREATED","request_an_order_refund","order_was_made_less_than_12_hours_ago_condition","create_dispute_for_a_delivered_order","dispute_reason","order_is_delivered_condition","present_moment_timestamp","timestamp_24_hours_after_order_delivery","order_delivered_less_than_24_hours_ago_condition","update_client_dispute_request","status","less_than_a_day_after_order_status_updated_condition","dispute_created_condition","dispute_settlement_adjustment_condition","BUYER_LOST_DISPUTE","BUYER_WON_DISPUTE","change_dispute_order_status_to_delivery_started","dispute_settled_condition","RETURNING_GOODS_TO_FARMER","change_dispute_order_status_to_delivered","shipment_started_to_farmer_condition","GOODS_DELIVERED_TO_FARMER","mark_disputed_order_as_completed","DISPUTED_ORDER_CLOSED","withdraw_payment_for_order","a_week_passed_since_order_status_was_updated","receiver_address","contract_deployed_day","getDay","present_day","order_has_been_closed_condition","buyer_lost_dispute_condition","a_week_after_seller_won_dispute_condition","withdrawal_address_eligible_condition","withdrawal_day_condition","refund_approved_for_order_condition","farmer_eligible_to_be_paid","buyer_won_dispute_and_24_hours_has_passed","order_confirmed_atleast_a_week_ago_condition","farmer_order_confirmed_a_week_ago_and_eligble_for_withdrawal","refund_approved_or_farmer_order_closed_or_seller_won_dispute_or_buyer_won_dispute_condition","promise","escrow_amount","buyer_amount","ORDER_COMPLETED"],"mappings":"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"}